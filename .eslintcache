[{"C:\\Learn\\ToDo\\project\\src\\index.js":"1","C:\\Learn\\ToDo\\project\\src\\App.js":"2","C:\\Learn\\ToDo\\project\\src\\reportWebVitals.js":"3","C:\\Learn\\ToDo\\project\\src\\Components\\MainScreen\\index.js":"4","C:\\Learn\\ToDo\\project\\src\\Components\\MainScreen\\units.js":"5","C:\\Learn\\ToDo\\project\\src\\redux\\redux-store.js":"6","C:\\Learn\\ToDo\\project\\src\\redux\\ToDoReducer.js":"7"},{"size":628,"mtime":1610971305241,"results":"8","hashOfConfig":"9"},{"size":190,"mtime":1610897819526,"results":"10","hashOfConfig":"9"},{"size":364,"mtime":1610802658534,"results":"11","hashOfConfig":"9"},{"size":5075,"mtime":1611237885246,"results":"12","hashOfConfig":"9"},{"size":3291,"mtime":1611233075424,"results":"13","hashOfConfig":"9"},{"size":221,"mtime":1611224331202,"results":"14","hashOfConfig":"9"},{"size":3167,"mtime":1611230284680,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1qojune",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},"C:\\Learn\\ToDo\\project\\src\\index.js",[],["32","33"],"C:\\Learn\\ToDo\\project\\src\\App.js",[],"C:\\Learn\\ToDo\\project\\src\\reportWebVitals.js",[],"C:\\Learn\\ToDo\\project\\src\\Components\\MainScreen\\index.js",["34"],"C:\\Learn\\ToDo\\project\\src\\Components\\MainScreen\\units.js",[],"C:\\Learn\\ToDo\\project\\src\\redux\\redux-store.js",[],"C:\\Learn\\ToDo\\project\\src\\redux\\ToDoReducer.js",["35"],"const TOGGLE_CHECKED = \"TOGGLE_CHECKED\";\nconst DEL_ELEM = \"DEL_ELEM\";\nconst TOGGLE_TEXT_EDIT = \"TOGGLE_TEXT_EDIT\";\nconst NEW_TEXT_TASK = \"NEW_TEXT_TASK\";\nconst GET_TIME = \"GET_TIME\";\nconst NEW_TEXT_ADD_TASK = \"NEW_TEXT_ADD_TASK\";\nconst ADD_NEW_TASK = \"ADD_NEW_TASK\";\nconst TOGGLE_FILTER = \"TOGGLE_FILTER\";\n\nconst initialState = {\n  ToDoData: [\n    {\n      id: 0,\n      text: \"Сделать ToDo\",\n      date: \"17.01.2021 19:20:30\",\n      checked: false,\n      textEdit: false,\n    },\n    {\n      id: 1,\n      text: \"Поесть\",\n      date: \"17.01.2021 20:21:30\",\n      checked: true,\n      textEdit: false,\n    },\n    {\n      id: 2,\n      text: \"Поспать\",\n      date: \"18.01.2021 12:20:20\",\n      checked: false,\n      textEdit: false,\n    },\n    {\n      id: 3,\n      text: \"Сделать галерею\",\n      date: \"18.01.2021 15:23:38\",\n      checked: false,\n      textEdit: false,\n    },\n  ],\n  newTextAddTask: \"\",\n  filterTasks: \"Uncompleted\",\n};\n\nexport const ToDoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case TOGGLE_CHECKED:\n      return {\n        ...state,\n        ToDoData: state.ToDoData.map((e) => {\n          if (action.id === e.id) {\n            e.checked = !e.checked;\n          }\n          return e;\n        }),\n      };\n      case TOGGLE_FILTER:\n      return {\n        ...state,\n        ToDoData: state.ToDoData.map((e) => {\n          if (action.id === e.id) {\n            e.checked = !e.checked;\n          }\n          return e;\n        }),\n      };\n    case TOGGLE_TEXT_EDIT:\n      return {\n        ...state,\n        ToDoData: state.ToDoData.map((e) => {\n          if (action.id === e.id) {\n            e.textEdit = !e.textEdit;\n          }\n          return e;\n        }),\n      };\n    case DEL_ELEM:\n      return {\n        ...state,\n        ToDoData: state.ToDoData.filter((e) => action.id !== e.id),\n      };\n    case NEW_TEXT_ADD_TASK:\n      return {\n        ...state,\n        newTextAddTask: action.text,\n      };\n    case ADD_NEW_TASK:\n      return {\n        ...state,\n        ToDoData: [\n          ...state.ToDoData,\n          {\n            id: ++state.ToDoData.length,\n            text: state.newTextAddTask,\n            date: action.date,\n            checked: false,\n            textEdit: false,\n          },\n        ],\n        newTextAddTask: \"\",\n      };\n    // case GET_TIME:\n    //   return {\n    //     ...state,\n    //   };\n    case NEW_TEXT_TASK:\n      return {\n        ...state,\n        ToDoData: state.ToDoData.map((e) => {\n          if (action.id === e.id) {\n            e.text = action.text;\n          }\n          return e;\n        }),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const toggleChecked = (id) => ({\n  type: TOGGLE_CHECKED,\n  id,\n});\nexport const toggleTextEdit = (id) => ({\n  type: TOGGLE_TEXT_EDIT,\n  id,\n});\nexport const delTask = (id) => ({\n  type: DEL_ELEM,\n  id,\n});\nexport const addNewTask = (date) => ({\n  type: ADD_NEW_TASK,\n  date,\n});\n// export const getTime = (time) => ({\n//   type: GET_TIME,\n//   time,\n// });\nexport const newTextTask = (id, text) => ({\n  type: NEW_TEXT_TASK,\n  id,\n  text,\n});\nexport const newTextAddTask = (text) => ({\n  type: NEW_TEXT_ADD_TASK,\n  text,\n});\nexport const toggleFilter = (filterTasks) => ({\n  type: TOGGLE_FILTER,\n  filterTasks,\n});\n",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":73,"column":9,"nodeType":"42","messageId":"43","endLine":73,"endColumn":16},{"ruleId":"44","severity":1,"message":"45","line":5,"column":7,"nodeType":"46","messageId":"47","endLine":5,"endColumn":15},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","no-unused-vars","'GET_TIME' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]